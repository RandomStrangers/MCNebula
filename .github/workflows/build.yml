name: Build latest
on: [push]

concurrency:
  group: ${{ github.ref }}-latest
  cancel-in-progress: true

jobs:
  build-mono:
    if: github.ref_name == github.event.repository.default_branch
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Compile MCNebula using mono
        shell: bash
        id: compile
        run: |
          msbuild MCNebula.sln /p:Configuration=Release
          cp -R bin/Release bin/Release_normal
          rm bin/Release/MCNebula_.dll bin/Release/MCNebula_.pdb
          msbuild MCGalaxy/MCNebula_.csproj /p:Configuration=Release /t:Rebuild /p:DefineConstants="DEV"

      - uses: ./.github/actions/notify_failure
        if: ${{ always() && steps.compile.outcome == 'failure' }}
        with:
          NOTIFY_MESSAGE: 'Failed to compile MCNebula .NET build! <@999409543001931788>'
          WEBHOOK_URL: '${{ secrets.WEBHOOK_URL }}'
          
      - uses: ./.github/actions/notify_success
        if: ${{ always() && steps.compile.outcome == 'success' }}
        with:
          SOURCE_FILE: 'bin/Release_normal'
          DEST_NAME: 'MCNebula'
          NOTIFY_MESSAGE: 'Successfully compiled MCNebula .NET build.'
          WEBHOOK_URL: '${{ secrets.WEBHOOK_URL }}'
      - uses: ./.github/actions/upload_build
        if: ${{ always() && steps.compile.outcome == 'success' }}
        with:
          SOURCE_FILE: 'bin/Release'
          DEST_NAME: 'MCGalaxy-dev'
          NOTIFY_MESSAGE: 'Successfully compiled MCNebula .NET Dev build.'
          WEBHOOK_URL: '${{ secrets.WEBHOOK_URL }}'
          

  build-dotnet:
    if: github.ref_name == github.event.repository.default_branch
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x
      - name: Restore dependencies
        run: dotnet restore CLI/MCNebulaCLI_dotnet.csproj
      - name: Build
        id: compile_net
        run: |
          dotnet build CLI/MCNebulaCLI_dotnet.csproj --no-restore
        
      - uses: ./.github/actions/notify_failure
        if: ${{ always() && steps.compile_net.outcome == 'failure' }}
        with:
          NOTIFY_MESSAGE: 'Failed to compile MCNebula dotnet build! <@999409543001931788>'
          WEBHOOK_URL: '${{ secrets.WEBHOOK_URL }}'
          
      - uses: ./.github/actions/notify_success
        if: ${{ always() && steps.compile_net.outcome == 'success' }}
        with:
          SOURCE_FILE: 'CLI/bin/Debug/net6.0'
          DEST_NAME: 'MCNebula-dotnet6.0'
          NOTIFY_MESSAGE: 'Successfully compiled MCNebula dotnet build.'
          WEBHOOK_URL: '${{ secrets.WEBHOOK_URL }}'
          
      # publish standalone windows binaries
      - name: Publish-win64
        run: dotnet publish CLI/MCNebulaCLI_dotnet.csproj -r win-x64 --self-contained
          
      - uses: ./.github/actions/notify_success
        if: ${{ always() && steps.compile_net.outcome == 'success' }}
        with:
          SOURCE_FILE: 'CLI/bin/Debug/net6.0/win-x64/publish'
          DEST_NAME: 'MCNebula-win64-standalone'
          NOTIFY_MESSAGE: 'Successfully compiled MCNebula dotnet standalone build.'
          WEBHOOK_URL: '${{ secrets.WEBHOOK_URL }}'
          
      # publish standalone linux binaries
      - name: Publish-linux64
        run: dotnet publish CLI/MCNebulaCLI_dotnet.csproj -r linux-x64 --self-contained
          
      - uses: ./.github/actions/notify_success
        if: ${{ always() && steps.compile_net.outcome == 'success' }}
        with:
          SOURCE_FILE: 'CLI/bin/Debug/net6.0/linux-x64/publish'
          DEST_NAME: 'MCNebula-linux64-standalone'
          NOTIFY_MESSAGE: 'Successfully compiled MCNebula dotnet linux standalone build.'
          WEBHOOK_URL: '${{ secrets.WEBHOOK_URL }}'